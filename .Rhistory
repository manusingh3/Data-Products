system(paste("pandoc", shQuote(inputFie), "-s --webtex -o", shQuote(outputFile)))
}
)
?Startup
print("This is the Rprofile inside the foo project!")
~/.Rprofile
~.Rprofile
~.Rprofile
getwd()
"C:/Users/SONY/Documents/.Rprofile"
library(data.table)
if (!exists('dat')){
dat = data.table(read.csv('C:/Users/SONY/Documents/repdata-data-StormData.csv', header = T))
#subset only the columns we need
dat = subset(dat, select = c("EVTYPE","FATALITIES","INJURIES","PROPDMG","CROPDMG"))
}
install.packages(c("caret", "swirl"))
library(data.table)
if (!exists('dat')){
dat = data.table(read.csv('C:/Users/SONY/Documents/repdata-data-StormData.csv', header = T))
#subset only the columns we need
dat = subset(dat, select = c("EVTYPE","FATALITIES","INJURIES","PROPDMG","CROPDMG"))
}
head(dat)
library(data.table)
if (!exists('dat'))
{
dat = data.table(read.csv('C:/Users/SONY/Documents/repdata-data-StormData.csv', header = T))
#subset only the columns we need
dat = subset(dat, select = c("EVTYPE","FATALITIES","INJURIES","PROPDMG","CROPDMG"))
}
```
View(dat)
options(rpubs.upload.method = "internal")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("01_hello")
runApp("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1", display.mode = "showcase")
runApp("App-1", display.mode = "showcase")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
library(datasets)
library(ISOcodes)
install.packages("ISOcodes")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
install.packages("reshape2")
install.packages("xlsx")
install.packages("rCharts")
require(rCharts)
library(xlsx)
library(rCharts)
install.packages("rCharts")
install_github("dplyr")
require(devtools)
install.packages("Rtools")
install.packages("devtools")
install.packages("devtools")
install.packages("xlsx")
install.packages("rCharts")
require(devtools)
install.packages("Rtools")
install.packages("Rtools31")
install.packages("Rtools31.exe")
install.packages("Rtools31")
require(devtools)
install_github('rCharts', 'ramnathv')
shiny::runApp('App-1')
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
h1 <- Highcharts$new()
h1$chart(type = "spline")
h1$series(data = c(1, 3, 2, 4, 5, 4, 6, 2, 3, 5, NA), dashStyle = "longdash")
h1$series(data = c(NA, 4, 1, 3, 4, 2, 9, 1, 2, 3, 4), dashStyle = "shortdot")
h1$legend(symbolWidth = 80)
h1
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
library(xlsx)
library(ISOcodes)
library(rCharts)
library(shiny)
library(reshape2)
USState<-read.xlsx("data/USStates.xlsx",header=TRUE,sheetIndex=1)
setwd()
getwd()
setwd("C:/Users/SONY/Documents/App-1")
USState<-read.xlsx("data/USStates.xlsx",header=TRUE,sheetIndex=1)
head(USState)
shiny::runApp()
shiny::runApp()
BMI<-function(wght,hght) {
if (wght==0 | hght==0) return(NA)
else  return(round(wght/(hght/100)^2,1))
}
classBMI<-function(bmic) {
if (is.na(bmic)) return ("")
else {
if (bmic<18.5) return("Your BMI is less than 18.5 you are considered UNDERWEIGHT")
if (bmic>=8.5 & bmic<24.9) return("Your BMI is in range 18.5 to 24.9 you are in HEALTHY WEIGHT RANGE")
if (bmic>=25 & bmic<29.9) return("Your BMI is in range 25 to 29.9 you are OVERWEIGHT")
if (bmic>=30) return("Your BMI is higher than 30 you are OBESE")
}
}
country<-function(ccode,state){
if (ccode=="USA") return (paste ("United States of America - ",state,sep=""))
else return(ISO_3166_1[ISO_3166_1$Alpha_3==ccode,4])
}
BMICrd<-function(ccode,gender){
temp<-subset(BMICrude,BMICrude$countrycode==ccode & BMICrude$sexdisplay==gender & BMICrude$displayvalue!="?")
if (nrow(temp)==0) return ("There are no data available for for your country")
else {
temp<-temp[order(-as.numeric(temp$yearcode)),]
return(paste(temp[1,"displayvalue"], ";",temp[1,"yearcode"]," Data",sep="" ))
}
}
BMICategories<-function(ccode){
temp<-subset(BMICat,BMICat$Code==ccode)
temp<-temp[order(temp$Year,decreasing=TRUE),c("Year","Indicator","Value")]
#temp<-subset(temp,temp$year==max(temp$year),select=c(2,5))
return(temp)
}
BMICatPlot<-function(ccode,gender,state){
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI ",tolower(gender),"s",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]}
if (nrow(temp)==0) {
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI adults",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]}
}
return(temp)
}
BMICatPlotYear<-function(ccode,gender,state){
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI ",tolower(gender),"s",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]
return(paste(unique(temp$Year),"Data"))}
if (nrow(temp)==0) {
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI adults",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)==0) return("No Data!")
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]
return(paste(unique(temp$Year),"Data"))}
}
return(temp)
}
BMITrend<-function(ccode){
temp<-subset(BMICrude,BMICrude$countrycode==ccode,select=c("yearcode","numeric","sexdisplay"))
#if (nrow(temp)!=0) {
temp<-temp[order(c(temp$yearcode,temp$gender)),]
names(temp)<-c("Year","MeanBMI","Gender")
#}
return(temp)
}
USStatesPlot<-function(ccode,state){
if (ccode=="USA") temp<-subset(USStatesData,USStatesData$State==state)
else temp<-subset(USStatesData,USStatesData$State=="XXX")
return(temp)
}
USStatesLabel<-function(ccode,state){
if (ccode=="USA") return(state)
else return("")
}
library(shiny)
library(reshape2)
library(xlsx)
library(ISOcodes)
library(rCharts)
data(ISO_3166_1)
USState<-read.xlsx("data/USStates.xlsx",header=TRUE,sheetIndex=1)
USStatesData<-melt(USState,id.vars="State")
names(USStatesData)<-c("State","Indicator","Value")
BMICrude<-read.csv("data/dataverbose.csv")
BMICat<-read.csv("data/ObservationDataiijxxz.csv")
BMICat$Year<-as.numeric(format(as.Date(as.character(BMICat$Date),format="%d/%m/%Y"),"%Y"))
shinyServer(
function(input, output) {
output$oiweight <- renderPrint({input$weightM})
output$oiheight <- renderPrint({input$heightM})
output$oiBMI <- renderPrint({
input$goButton
isolate(BMI(input$weightM,input$heightM))
})
output$oiBMIclass<-renderText({
input$goButton
isolate(classBMI(BMI(input$weightM,input$heightM)))
})
output$oicountry<-renderText({
input$goButton
isolate(country(input$country,input$state))
})
output$oigender <- renderText({
input$goButton
isolate(input$gender)
})
output$oiBMIcrude <- renderText({
input$goButton
isolate(BMICrd(input$country,input$gender))
})
output$oiBMIcattable = renderDataTable({
input$goButton
isolate(BMICategories(input$country))
})
output$oiPlotYear = renderText({
input$goButton
isolate(BMICatPlotYear(input$country,input$gender,input$state))
})
output$Plot1 <- renderChart({
input$goButton
isolate(datap<-BMICatPlot(input$country,input$gender,input$state))
hb1 = hPlot(x = "Indicator", y = "Value", data = datap, type = "bar")
hb1$addParams(dom ='Plot1')
#np1 <- nPlot(Value~Indicator,type="discreteBarChart",data=datap)
#np1$addParams(dom ='Plot1')
return(hb1)
})
output$Plot2 <- renderChart({
input$goButton
isolate(datat<-BMITrend(input$country))
hp1 <- hPlot(x = "Year", y = "MeanBMI",group="Gender", data = datat, type = "line")
hp1$addParams(dom ='Plot2')
return(hp1)
})
output$oiState<-renderText({
input$goButton
isolate(USStatesLabel(input$country,input$state))
})
output$Plot3 <- renderChart({
input$goButton
isolate(datau<-USStatesPlot(input$country,input$state))
hb2 = hPlot(x = "Indicator", y = "Value", data = datau, type = "bar")
hb2$addParams(dom ='Plot3')
return(hb2)
})
})
BMICat$Year<-as.numeric(format(as.Date(as.character(BMICat$Date),format="%d/%m/%Y"),"%Y"))
BMICat$Date
shiny::runApp()
BMI<-function(wght,hght) {
if (wght==0 | hght==0) return(NA)
else  return(round(wght/(hght/100)^2,1))
}
classBMI<-function(bmic) {
if (is.na(bmic)) return ("")
else {
if (bmic<18.5) return("Your BMI is less than 18.5 you are considered UNDERWEIGHT")
if (bmic>=8.5 & bmic<24.9) return("Your BMI is in range 18.5 to 24.9 you are in HEALTHY WEIGHT RANGE")
if (bmic>=25 & bmic<29.9) return("Your BMI is in range 25 to 29.9 you are OVERWEIGHT")
if (bmic>=30) return("Your BMI is higher than 30 you are OBESE")
}
}
country<-function(ccode,state){
if (ccode=="USA") return (paste ("United States of America - ",state,sep=""))
else return(ISO_3166_1[ISO_3166_1$Alpha_3==ccode,4])
}
BMICrd<-function(ccode,gender){
temp<-subset(BMICrude,BMICrude$countrycode==ccode & BMICrude$sexdisplay==gender & BMICrude$displayvalue!="?")
if (nrow(temp)==0) return ("There are no data available for for your country")
else {
temp<-temp[order(-as.numeric(temp$yearcode)),]
return(paste(temp[1,"displayvalue"], ";",temp[1,"yearcode"]," Data",sep="" ))
}
}
BMICategories<-function(ccode){
temp<-subset(BMICat,BMICat$Code==ccode)
temp<-temp[order(temp$Year,decreasing=TRUE),c("Year","Indicator","Value")]
#temp<-subset(temp,temp$year==max(temp$year),select=c(2,5))
return(temp)
}
BMICatPlot<-function(ccode,gender,state){
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI ",tolower(gender),"s",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]}
if (nrow(temp)==0) {
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI adults",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]}
}
return(temp)
}
BMICatPlotYear<-function(ccode,gender,state){
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI ",tolower(gender),"s",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]
return(paste(unique(temp$Year),"Data"))}
if (nrow(temp)==0) {
temp<-subset(BMICat,BMICat$Code==ccode & grepl(paste("^BMI adults",sep=""),as.character(BMICat$Indicator)))
if (nrow(temp)==0) return("No Data!")
if (nrow(temp)!=0) {
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-temp[temp$Year==max(temp$Year),c(2,5,7)]
return(paste(unique(temp$Year),"Data"))}
}
return(temp)
}
BMITrend<-function(ccode){
temp<-subset(BMICrude,BMICrude$countrycode==ccode,select=c("yearcode","numeric","sexdisplay"))
#if (nrow(temp)!=0) {
temp<-temp[order(c(temp$yearcode,temp$gender)),]
names(temp)<-c("Year","MeanBMI","Gender")
#}
return(temp)
}
USStatesPlot<-function(ccode,state){
if (ccode=="USA") temp<-subset(USStatesData,USStatesData$State==state)
else temp<-subset(USStatesData,USStatesData$State=="XXX")
return(temp)
}
USStatesLabel<-function(ccode,state){
if (ccode=="USA") return(state)
else return("")
}
library(shiny)
library(reshape2)
library(xlsx)
library(ISOcodes)
library(rCharts)
data(ISO_3166_1)
USState<-read.xlsx("data/USStates.xlsx",header=TRUE,sheetIndex=1)
USStatesData<-melt(USState,id.vars="State")
names(USStatesData)<-c("State","Indicator","Value")
BMICrude<-read.csv("data/dataverbose.csv")
BMICat<-read.csv("data/ObservationDataiijxxz.csv")
##BMICat$Year<-as.numeric(format(as.Date(as.character(BMICat$Date),format="%d/%m/%Y"),"%Y"))
shinyServer(
function(input, output) {
output$oiweight <- renderPrint({input$weightM})
output$oiheight <- renderPrint({input$heightM})
output$oiBMI <- renderPrint({
input$goButton
isolate(BMI(input$weightM,input$heightM))
})
output$oiBMIclass<-renderText({
input$goButton
isolate(classBMI(BMI(input$weightM,input$heightM)))
})
output$oicountry<-renderText({
input$goButton
isolate(country(input$country,input$state))
})
output$oigender <- renderText({
input$goButton
isolate(input$gender)
})
output$oiBMIcrude <- renderText({
input$goButton
isolate(BMICrd(input$country,input$gender))
})
output$oiBMIcattable = renderDataTable({
input$goButton
isolate(BMICategories(input$country))
})
output$oiPlotYear = renderText({
input$goButton
isolate(BMICatPlotYear(input$country,input$gender,input$state))
})
output$Plot1 <- renderChart({
input$goButton
isolate(datap<-BMICatPlot(input$country,input$gender,input$state))
hb1 = hPlot(x = "Indicator", y = "Value", data = datap, type = "bar")
hb1$addParams(dom ='Plot1')
#np1 <- nPlot(Value~Indicator,type="discreteBarChart",data=datap)
#np1$addParams(dom ='Plot1')
return(hb1)
})
output$Plot2 <- renderChart({
input$goButton
isolate(datat<-BMITrend(input$country))
hp1 <- hPlot(x = "Year", y = "MeanBMI",group="Gender", data = datat, type = "line")
hp1$addParams(dom ='Plot2')
return(hp1)
})
output$oiState<-renderText({
input$goButton
isolate(USStatesLabel(input$country,input$state))
})
output$Plot3 <- renderChart({
input$goButton
isolate(datau<-USStatesPlot(input$country,input$state))
hb2 = hPlot(x = "Indicator", y = "Value", data = datau, type = "bar")
hb2$addParams(dom ='Plot3')
return(hb2)
})
})
library(shiny)
library(datasets)
library(ISOcodes)
data(ISO_3166_1)
shinyUI(pageWithSidebar(
headerPanel("Body Mass Index Classification in Adults"),
sidebarPanel(
numericInput(inputId="heightM", label="Your height in cm", value= 0,min=0),
numericInput(inputId="weightM", label="Your weight in kg", value= 0,min=0),
radioButtons(inputId="gender", label="Gender", choices=c("Female","Male")),
selectInput(inputId="country", label="Country", choices=sort(ISO_3166_1$Alpha_3),
multiple = FALSE,selected="USA"),
conditionalPanel(
condition = "input.country == 'USA'",
p("If you live in USA, please choose a state"),
selectInput(inputId="state", label="State", choices=state.name,
multiple = FALSE,selected=NULL)),
actionButton("goButton", "Go!"),
br(),
p(strong(em("Documentation:",a("Body Mass Index Classification in Adults",href="READMe.html")))),
p(strong(em("Github repository:",a("Developing Data Products - Peer Assessment Project; Shiny App",href="https://github.com/CrazyFarang/DevelopingDataProducts"))))
),
mainPanel(
tabsetPanel(
tabPanel('Your results',
h5('Your BMI coefficient kg/m^2'),
verbatimTextOutput("oiBMI"),
verbatimTextOutput("oiBMIclass"),
img(src="WHOBMI.png", height = 600, width =600),
p("Source: ", a("WHO BMI classification",
href = "http://apps.who.int/bmi/index.jsp?introPage=intro_3.html"))
),
tabPanel('Data Summary',
h5('Available data for'),
verbatimTextOutput("oicountry"),
h5('Gender'),
verbatimTextOutput("oigender"),
h5('Mean BMI (kg/m2) (crude estimate) and 95% CI'),
verbatimTextOutput("oiBMIcrude"),
p("Source: ", a("WHO Global Health Observatory Data Repository",
href = "http://apps.who.int/gho/data/node.main.A903?lang=en")),
h5('Recent BMI Indicators'),
dataTableOutput("oiBMIcattable"),
p("Source: ", a("KNOEMA-WHO Global Database on Body Mass Index (BMI)",
href = "http://knoema.com/WHOGDOBMIMay/who-global-database-on-body-mass-index-bmi"))
),
tabPanel('Plot: BMI Indicators',
h5('Recent BMI Indicators'),
p("Plotted data are for your gender for your specific country"),
p("If there are no data for your gender, plotted data are for adults for your specific country"),
#verbatimTextOutput("oicountry"),
verbatimTextOutput("oiPlotYear"),
showOutput("Plot1","highcharts"),
p("Worldwide Data: ", a("KNOEMA-WHO Global Database on Body Mass Index (BMI)", href = "http://knoema.com/WHOGDOBMIMay/who-global-database-on-body-mass-index-bmi"))
),
tabPanel('Plot: Mean BMI Trend',
h5('Mean BMI Trend per Years'),
showOutput("Plot2","highcharts"),
p("Source: ", a("WHO Global Health Observatory Data Repository",
href = "http://apps.who.int/gho/data/node.main.A903?lang=en"))
),
tabPanel('Plot: BMI Indicators for US States',
h5('2012 US States BMI Indicators for Adults '),
verbatimTextOutput("oiState"),
showOutput("Plot3","highcharts"),
p("US States Data: ", a("CDC-Behavioral Risk Factor Surveillance System; Prevalence and Trends Data; Overweight and Obesity(BMI) 2012", href = "http://apps.nccd.cdc.gov/brfss/list.asp?cat=OB&yr=2012&qkey=8261&state=All"))
)
),
p(strong("All you need is love. But a little chocolate now and then doesn't hurt. Charles M. Schulz"))
)
)
)
shiny::runApp()
temp<-temp[order(temp$Year,decreasing=TRUE),]
temp<-subset(BMICrude,BMICrude$countrycode==ccode & BMICrude$sexdisplay==gender & BMICrude$displayvalue!="?")
BMICat$Year<-as.numeric(format(as.Date(as.character(BMICat$Date),format="%d/%m/%Y"),"%Y"))
shiny::runApp()
names(USStatesData)<-c("State","Indicator","Value")
USStatesData<-melt(USState,id.vars="State")
USState<-read.xlsx("data/USStates.xlsx",header=TRUE,sheetIndex=1)
BMICrude<-read.csv("data/dataverbose.csv")
BMICat<-read.csv("data/ObservationDataiijxxz.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?mtcars
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
